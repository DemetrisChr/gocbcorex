// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package core

import (
	"github.com/couchbase/stellar-nebula/contrib/cbconfig"
	"sync"
)

// Ensure, that ConfigManagerMock does implement ConfigManager.
// If this is not the case, regenerate this file with moq.
var _ ConfigManager = &ConfigManagerMock{}

// ConfigManagerMock is a mock implementation of ConfigManager.
//
//	func TestSomethingThatUsesConfigManager(t *testing.T) {
//
//		// make and configure a mocked ConfigManager
//		mockedConfigManager := &ConfigManagerMock{
//			ApplyConfigFunc: func(sourceHostname string, json *cbconfig.TerseConfigJson)  {
//				panic("mock out the ApplyConfig method")
//			},
//		}
//
//		// use mockedConfigManager in code that requires ConfigManager
//		// and then make assertions.
//
//	}
type ConfigManagerMock struct {
	// ApplyConfigFunc mocks the ApplyConfig method.
	ApplyConfigFunc func(sourceHostname string, json *cbconfig.TerseConfigJson)

	// calls tracks calls to the methods.
	calls struct {
		// ApplyConfig holds details about calls to the ApplyConfig method.
		ApplyConfig []struct {
			// SourceHostname is the sourceHostname argument value.
			SourceHostname string
			// JSON is the json argument value.
			JSON *cbconfig.TerseConfigJson
		}
	}
	lockApplyConfig sync.RWMutex
}

// ApplyConfig calls ApplyConfigFunc.
func (mock *ConfigManagerMock) ApplyConfig(sourceHostname string, json *cbconfig.TerseConfigJson) {
	if mock.ApplyConfigFunc == nil {
		panic("ConfigManagerMock.ApplyConfigFunc: method is nil but ConfigManager.ApplyConfig was just called")
	}
	callInfo := struct {
		SourceHostname string
		JSON           *cbconfig.TerseConfigJson
	}{
		SourceHostname: sourceHostname,
		JSON:           json,
	}
	mock.lockApplyConfig.Lock()
	mock.calls.ApplyConfig = append(mock.calls.ApplyConfig, callInfo)
	mock.lockApplyConfig.Unlock()
	mock.ApplyConfigFunc(sourceHostname, json)
}

// ApplyConfigCalls gets all the calls that were made to ApplyConfig.
// Check the length with:
//
//	len(mockedConfigManager.ApplyConfigCalls())
func (mock *ConfigManagerMock) ApplyConfigCalls() []struct {
	SourceHostname string
	JSON           *cbconfig.TerseConfigJson
} {
	var calls []struct {
		SourceHostname string
		JSON           *cbconfig.TerseConfigJson
	}
	mock.lockApplyConfig.RLock()
	calls = mock.calls.ApplyConfig
	mock.lockApplyConfig.RUnlock()
	return calls
}
